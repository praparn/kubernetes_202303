Instruction for Workshop 1.8_ConfigMap_Secret:
Note: This instruction will demonstrate about how to ConfigMap and Secret on Microservice:
====================================================

====================================================
Part1: Container level configuration:
====================================================
1. Get command prompt for access folder workshop 1.8 by command :cd /xxxx/WorkShop_1.8_ConfigMap_Secret
2. Check File on WorkShop
3. Create Namespace by command:
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.8_ConfigMap_Secret/webmicroservice_namespace.yml

4. Create ConfigMap by command:
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.8_ConfigMap_Secret/webmodule_configmap.yml
	kubectl get configmap -n webmicroservice
	kubectl describe configmap/webmodule-configmap -n webmicroservice

5. Create Secret by command:
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.8_ConfigMap_Secret/databasemodule_secret.yml
	kubectl get secret -n webmicroservice
	kubectl describe secret/databasemodule-secret -n webmicroservice

6. Create Database Deployment by command:
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.8_ConfigMap_Secret/databasemodule_deploy_config.yml
	kubectl get deployment -n webmicroservice
	kubectl get rs -n webmicroservice
	kubectl get pods -n webmicroservice

7. Check Detail of Pods by command:
	kubectl describe pods/<pods name>  -n webmicroservice

8. Create WebModbule Deployment by command:
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.8_ConfigMap_Secret/webmodule_deploy_config.yml
	kubectl get deployment/web -n webmicroservice
	kubectl get rs -n webmicroservice
	kubectl get pods -n webmicroservice

9. Check Detail of Pods by command:
	kubectl describe pods/<pods name> -n webmicroservice

10. Setup Environment for Test:
	export Server_IP=<Private IP>
	export Server_Port=30500 ==> For direct test change to 32500

11. Test insert data to Restful by command:
  	curl http://$Server_IP:$Server_Port/init
	curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "1", "user":"Praparn Luangphoonlap", "descripe":"Slave"}' http://$Server_IP:$Server_Port/users/insertuser
	curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "2", "user":"Somchai Sunsukwan", "descripe":"Security Guard"}' http://$Server_IP:$Server_Port/users/insertuser
	curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "3", "user":"Sanyachan Panrudee", "descripe":"House Keeping"}' http://$Server_IP:$Server_Port/users/insertuser
	curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "4", "user":"Sakkan Yanyicharoen", "descripe":"Messenger"}' http://$Server_IP:$Server_Port/users/insertuser
	curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "5", "user":"Chatchai Moungang", "descripe":"Programmer"}' http://$Server_IP:$Server_Port/users/insertuser
	curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "6", "user":"Anusit Kannaphat", "descripe":"DevOps Manager"}' http://$Server_IP:$Server_Port/users/insertuser
	curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "7", "user":"Meelarp Maisanuk", "descripe":"System Engineer"}' http://$Server_IP:$Server_Port/users/insertuser
	curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "8", "user":"Pansa Bunsong", "descripe":"Secuirty Guard"}' http://$Server_IP:$Server_Port/users/insertuser
	curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "9", "user":"Wiphanee Wongsaisawan", "descripe":"Administrator"}' http://$Server_IP:$Server_Port/users/insertuser

12. Test pull data from database and databasecache by command:
	curl http://$Server_IP:$Server_Port/users/1
	curl http://$Server_IP:$Server_Port/users/1 ==> Expect from Cache
	curl http://$Server_IP:$Server_Port/users/4
	curl http://$Server_IP:$Server_Port/users/4 ==> Expect from Cache

13. Delete data from database and databasecache by command:
	curl http://$Server_IP:$Server_Port/users/removeuser/1
	curl http://$Server_IP:$Server_Port/users/removeuser/2
	curl http://$Server_IP:$Server_Port/users/removeuser/3
	curl http://$Server_IP:$Server_Port/users/removeuser/4

14. Cleanup lab by command:
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.8_ConfigMap_Secret/webmodule_deploy_config.yml
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.8_ConfigMap_Secret/databasemodule_deploy_config.yml
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.8_ConfigMap_Secret/webmicroservice_namespace.yml
