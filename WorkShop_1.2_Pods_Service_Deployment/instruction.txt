Instruction for Workshop 1.2 Pods_Service_Deployment:
====================================================
Part 1: Create basic Pods for single container:
This workshop will create web Pods and simple map to outside
====================================================
#####################################Trick########################################
0. for faster create pods you can pull image below inside minikube by command
sudo ctr image pull docker.io/labdocker/cluster:webservicelite
sudo ctr image pull docker.io/labdocker/mariadb:latest
sudo ctr image pull docker.io/labdocker/redis:latest
sudo ctr image pull docker.io/labdocker/cluster:webservicev2
sudo ctr image pull docker.io/labdocker/cluster:webservicev2set2
sudo ctr image pull docker.io/labdocker/cluster:webcache_kubernetes
sudo ctr image pull docker.io/labdocker/cadvisor:latest

###################################################################################

1. Get command prompt for access folder workshop 1.2 by command :cd /xxxx/WorkShop_1.2_Pods_Service_Deployment/singlecontainer
2. Check file on workshop

3. Create Pods and check Pods state (Expect: Running) by command:
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/singlecontainer/webtest_pod.yml
	kubectl get pods

4. Create Service and check mapping port by command:
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/singlecontainer/webtest_svc.yml
	kubectl get svc

	---------------------------------------------------
	Example: Port mapping outside on TCP:32131
	---------------------------------------------------
	NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE
	kubernetes   10.0.0.1     <none>        443/TCP          4d
	webtest      10.0.0.87    <nodes>       5000:32131/TCP   4m
	---------------------------------------------------

5. Test curl and web browser for access web by command:
	curl http://<Private IP>:<port>
	Open browser: http://<Public IP>:<port>

6. Check detail of Pods and service by command:
	kubectl describe pods webtest
	kubectl describe svc webtest

7. Check log from Pods by command:
	kubectl logs webtest -c webtest

8. Test access to container in Pods by command:
	kubectl exec -it webtest -c webtest sh
	more mainlite.py
	exit

9. Clear environment by delete Pods and service by command:
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/singlecontainer/webtest_pod.yml
	kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/singlecontainer/webtest_svc.yml

====================================================
Part 2: Create multiple
This workshop will create Pods with multiple container
====================================================

1. Get command prompt for access folder workshop 1.2 by command :cd /xxxx/WorkShop_1.2_Pods_Service_Deployment/multicontainer
2. Workshop should contain file as below:
-rw-r--r--@ 1 praparn  staff   404B Jul  2 18:01 databasemodule_pod.yml
-rw-r--r--@ 1 praparn  staff   353B Jul  2 18:25 databasemodule_svc.yml
-rw-r--r--@ 1 praparn  staff   685B Jul  2 19:19 webmodule_pod.yml
-rw-r--r--@ 1 praparn  staff   484B Jul  2 19:24 webmodule_svc.yml

3. Create Pods and Service for databasemodule (maindb) by command (Step-by-Step Wait until previous complete before next step):
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/multicontainer/databasemodule_pod.yml
	kubectl get pods
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/multicontainer/databasemodule_svc.yml
	kubectl get svc

4. Create Pods and Service for webservicemodule (web1) by command (Step-by-Step Wait until previous complete before next step):
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/multicontainer/webmodule_pod.yml
	kubectl get pods
	kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/multicontainer/webmodule_svc.yml
	kubectl get svc

5. Check ip address by command: ip addr | grep ens5 (Check: ens5 device)

6. Set environment for test by command:
	export Server_IP=<Private IP>
	export Server_Port=30500	==> Check port had been fixed from YML file

7. Test get webpage by browser: http://<Public IP>:30500 or curl http://$Server_IP:$Server_Port/

8. Initial database by command:
		curl http://$Server_IP:$Server_Port/init			==> initial Database

9. Insert database by command:
		curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "1", "user":"Praparn Luangphoonlap", "descripe":"Slave"}' http://$Server_IP:$Server_Port/users/insertuser
		curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "2", "user":"Somchai Sunsukwan", "descripe":"Security Guard"}' http://$Server_IP:$Server_Port/users/insertuser
		curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "3", "user":"Sanyachan Panrudee", "descripe":"House Keeping"}' http://$Server_IP:$Server_Port/users/insertuser
		curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "4", "user":"Sakkan Yanyicharoen", "descripe":"Messenger"}' http://$Server_IP:$Server_Port/users/insertuser
		curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "5", "user":"Chatchai Moungang", "descripe":"Programmer"}' http://$Server_IP:$Server_Port/users/insertuser
		curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "6", "user":"Anusit Kannaphat", "descripe":"DevOps Manager"}' http://$Server_IP:$Server_Port/users/insertuser
		curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "7", "user":"Meelarp Maisanuk", "descripe":"System Engineer"}' http://$Server_IP:$Server_Port/users/insertuser
		curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "8", "user":"Pansa Bunsong", "descripe":"Secuirty Guard"}' http://$Server_IP:$Server_Port/users/insertuser
		curl -i -H "Content-Type: application/json" -X POST -d '{"uid": "9", "user":"Wiphanee Wongsaisawan", "descripe":"Administrator"}' http://$Server_IP:$Server_Port/users/insertuser

10. Pull data by command:
		curl http://$Server_IP:$Server_Port/users/1
		curl http://$Server_IP:$Server_Port/users/1 ==> Expect from Cache
		curl http://$Server_IP:$Server_Port/users/4
		curl http://$Server_IP:$Server_Port/users/4 ==> Expect from Cache

11. Delete data by command:
		curl http://$Server_IP:$Server_Port/users/removeuser/1
		curl http://$Server_IP:$Server_Port/users/removeuser/2
		curl http://$Server_IP:$Server_Port/users/removeuser/3
		curl http://$Server_IP:$Server_Port/users/removeuser/4

12. Create Pods for "web2" and check readyness by command:
		kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/multicontainer/webmodule_pod2.yml
		kubectl get pods

13. Delete existing Pods "web1" by command:
		kubectl delete pods web1

14. Test get webpage by command: curl http://$Server_IP:$Server_Port/

15. Remove Pods and Service for Cleanup by command:
		kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/multicontainer/webmodule_pod2.yml
		kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/multicontainer/webmodule_svc.yml
		kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/multicontainer/databasemodule_pod.yml
		kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_202205/master/WorkShop_1.2_Pods_Service_Deployment/multicontainer/databasemodule_svc.yml

====================================================
Part 3: Check API Version, Kubernetes Component
This workshop will show how to use help and explain structure of component in kubernetes
====================================================

1. Check all available component in exiting kubernetes farm via command: kubectl api-resources -o wide

2. Check detail of parameter/version/etc relate to "pods" via command: kubectl explain pods, kubectl explain svc